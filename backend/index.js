const express = require('express');
const cors = require('cors');
const axios = require('axios');
const sequelize = require('./db/database');
const BTCPrice = require('./db/btcModel');
const cron = require('node-cron');
const moment = require('moment-timezone');
const NodeCache = require("node-cache");
require('dotenv').config();

const cache = new NodeCache({ stdTTL: 600 });
const fetchHistoricalData = require('./fetchHistory');

const app = express();
const PORT = process.env.PORT || 5000;
const { Op } = require("sequelize");

app.use(cors({
  origin: [
    'http://localhost:8080',
    'http://frontend:3000',
    'http://backend:5000'
  ],
  methods: ['GET']
}));
app.use(express.json());

async function checkAndFetchHistory() {
  const requiredDays = 999;
  const count = await BTCPrice.count();

  console.log(`–í –ë–î —Å–µ–π—á–∞—Å ${count} –∑–∞–ø–∏—Å–µ–π.`);

  if (count < requiredDays) {
    const missingDays = requiredDays - count;
    console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (${count}/${requiredDays} –¥–Ω–µ–π). –î–æ–∑–∞–≥—Ä—É–∂–∞–µ–º ${missingDays} –¥–Ω–µ–π...`);
    await fetchHistoricalData(missingDays);
  } else {
    console.log(`–í –ë–î –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (${count} –¥–Ω–µ–π).`);
  }
}

async function fetchAndSaveData({ days, startDate, endDate }) {
  try {
    const allData = [];
    const limit = 1000;
    const interval = '1d';
    const symbol = 'BTCUSDT';

    if (days) {
      endDate = moment().valueOf();
      startDate = moment().subtract(days, 'days').valueOf();
    } else if (startDate && endDate) {
      startDate = moment(startDate).valueOf();
      endDate = moment(endDate).valueOf();
    } else {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –ª–∏–±–æ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.');
    }

    const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));
    const chunks = Math.ceil(totalDays / limit);
    console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ${totalDays} –¥–Ω–µ–π, ${chunks} —á–∞–Ω–∫–æ–≤.`);

    for (let i = 0; i < chunks; i++) {
      const chunkStart = moment(startDate).add(i * limit, 'days').valueOf();
      const chunkEnd = Math.min(
        moment(chunkStart).add(limit - 1, 'days').valueOf(),
        endDate
      );

      const apiUrl = `https://api1.binance.com/api/v3/klines?symbol=${symbol}&interval=${interval}&startTime=${chunkStart}&endTime=${chunkEnd}&limit=${limit}`;

      try {
        console.log(`–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å ${moment(chunkStart).format('YYYY-MM-DD')} –ø–æ ${moment(chunkEnd).format('YYYY-MM-DD')}`);
        const response = await axios.get(apiUrl);

        if (!response.data || response.data.length === 0) {
          console.warn(`–ß–∞–Ω–∫ ${i + 1}: API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.`);
          continue;
        }

        const chunkData = response.data.map(item => ({
          date: moment(item[0]).format('YYYY-MM-DD'),
          price: parseFloat(item[4])
        }));

        allData.push(...chunkData);
        console.log(`–ß–∞–Ω–∫ ${i + 1}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chunkData.length} –∑–∞–ø–∏—Å–µ–π.`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞–Ω–∫–∞ ${i + 1}:`, error.message);
      }
    }

    if (allData.length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
      return [];
    }

    console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${allData.length} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
    await BTCPrice.bulkCreate(allData, { updateOnDuplicate: ['price'] });

    return await BTCPrice.findAll({
      where: {
        date: days
          ? { [Op.gte]: moment().subtract(days, 'days').format('YYYY-MM-DD') }
          : { [Op.between]: [moment(startDate).format('YYYY-MM-DD'), moment(endDate).format('YYYY-MM-DD')] }
      },
      order: [['date', 'ASC']]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    throw error;
  }
}

sequelize.sync().then(async () => {
  console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!');
  await checkAndFetchHistory();

  app.listen(PORT, () => {
    console.log(`Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  });

}).catch(err => {
  console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
});

cron.schedule('0 10 * * *', async () => {
  try {
    console.log('‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö BTC...');
    await fetchHistoricalData(1);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}, {
  timezone: "Europe/Moscow"
});
console.log('NB: –ê–≤—Ç–æ—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö BTC –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ 10:00 –ú–°–ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.');

app.get('/api/btc-price', async (req, res) => {
  const days = Number(req.query.days) || 7;
  const cacheKey = `btc-price-${days}`;
  const forceRefresh = req.query.forceRefresh === 'true';

  if (!forceRefresh) {
    const cachedData = cache.get(cacheKey);
    if (cachedData) {
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–∞ ${cacheKey}`);
      return res.json(cachedData);
    }
  }

  try {
    let prices = await BTCPrice.findAll({
      where: { date: { [Op.gte]: moment().subtract(days, 'days').format('YYYY-MM-DD') } },
      order: [['date', 'ASC']]
    });

    const today = moment().format('YYYY-MM-DD');
    const hasTodayData = prices.some(price => price.date === today);

    if (!hasTodayData) {
      console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É Binance...');
      prices = await fetchAndSaveData({ days });
    }

    if (prices.length < days) {
      const missingDays = days - prices.length;
      console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–æ –µ—â—ë ${missingDays} –¥–Ω–µ–π. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É Binance...`);
      prices = await fetchAndSaveData({ days: missingDays });
    }

    cache.set(cacheKey, prices, 600);
    res.json(prices);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
  }
});

app.get('/api/btc-price-range', async (req, res) => {
  const { start, end } = req.query;

  if (!start || !end) {
    return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É." });
  }

  try {
    console.log(`üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å ${start} –ø–æ ${end}`);
    let prices = await BTCPrice.findAll({
      where: { date: { [Op.between]: [start, end] } },
      order: [['date', 'ASC']]
    });

    const today = moment().format('YYYY-MM-DD');
    const isTodayInRange = moment(today).isBetween(start, end, null, '[]');

    if (isTodayInRange) {
      const hasTodayData = prices.some(price => price.date === today);

      if (!hasTodayData) {
        console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É Binance...');
        const todayData = await fetchAndSaveData({ startDate: today, endDate: today });
        await BTCPrice.bulkCreate(todayData, { updateOnDuplicate: ['price'] });
        prices = await BTCPrice.findAll({
          where: { date: { [Op.between]: [start, end] } },
          order: [['date', 'ASC']]
        });
      }
    }

    if (!prices || prices.length === 0) {
      console.log("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É Binance...");
      const historicalData = await fetchAndSaveData({ startDate: start, endDate: end });
      await BTCPrice.bulkCreate(historicalData, { updateOnDuplicate: ['price'] });
      prices = await BTCPrice.findAll({
        where: { date: { [Op.between]: [start, end] } },
        order: [['date', 'ASC']]
      });
    }

    if (!prices || prices.length === 0) {
      return res.status(404).json({ error: "–î–∞–Ω–Ω—ã–µ –∑–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç." });
    }

    res.json(prices);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
  }
});
